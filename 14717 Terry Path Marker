package org.firstinspires.ftc.teamcode.Big_Boi_Bot;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

@TeleOp(name="14717 Terry path (real marker)", group="Linear Opmode")
public class pathing extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor leftDrive = null;
    private DcMotor rightDrive = null;
    private DcMotor arm1 = null;
    private DcMotor arm2 = null;
    private Servo bucket11 = null;
    private Servo bucket12 = null;
    private Servo bucket2 = null;
    private double bucket11position = 0;
    private double bucket12position = 0;
    private double bucket2position = 0;
    private ElapsedTime elapsedTime = new ElapsedTime();

    private void turnright(double degrees) {

        runtime.reset();

        double movetime = (degrees / 210);
        while (opModeIsActive() && (runtime.time() < movetime)) {
            leftDrive.setPower(-1);
            rightDrive.setPower(1);
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("left motor", leftDrive.toString());
            telemetry.addData("right motor", rightDrive.toString());
            telemetry.addData("other thing", runtime.time());
            telemetry.update();
        }
        leftDrive.setPower(0);
        rightDrive.setPower(0);
    }

    private void turnleft(double degrees) {

        runtime.reset();

        double movetime = (degrees / 210);
        while (opModeIsActive() && (runtime.time() < movetime)) {
            leftDrive.setPower(1);
            rightDrive.setPower(-1);
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("left motor", leftDrive.toString());
            telemetry.addData("right motor", rightDrive.toString());
            telemetry.addData("other thing", runtime.time());
            telemetry.update();
        }
        leftDrive.setPower(0);
        rightDrive.setPower(0);
    }

    private void move(double distance) {  //distance is in cm. this function also doesn't account for sliding after motors shut off.

        runtime.reset();

        double movetime = (distance / 76.5);
        while (opModeIsActive() && (runtime.time() < movetime)) {
            leftDrive.setPower(-1);
            rightDrive.setPower(-1);
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("left motor", leftDrive.toString());
            telemetry.addData("right motor", rightDrive.toString());
            telemetry.addData("other thing", runtime.time());
            telemetry.update();
        }
        leftDrive.setPower(0);
        rightDrive.setPower(0);
    }

    private void moveback(double distance) {  //distance is in cm. this function also doesn't account for sliding after motors shut off.

        runtime.reset();

        double movetime = (distance / 76.5);
        while (opModeIsActive() && (runtime.time() < movetime)) {
            leftDrive.setPower(1);
            rightDrive.setPower(1);
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("left motor", leftDrive.toString());
            telemetry.addData("right motor", rightDrive.toString());
            telemetry.addData("other thing", runtime.time());
            telemetry.update();
        }
        leftDrive.setPower(0);
        rightDrive.setPower(0);
    }

    @Override
    public void runOpMode() throws InterruptedException {
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step (using the FTC Robot Controller app on the phone).
        leftDrive = hardwareMap.get(DcMotor.class, "motor0");
        rightDrive = hardwareMap.get(DcMotor.class, "motor1");
        arm1 = hardwareMap.get(DcMotor.class, "motor2");
        arm2 = hardwareMap.get(DcMotor.class, "motor3");

        // Most robots need the motor on one side to be reversed to drive forward
        // Reverse the motor that runs backwards when connected directly to the battery
        leftDrive.setDirection(DcMotor.Direction.FORWARD);
        rightDrive.setDirection(DcMotor.Direction.REVERSE);
        arm1.setDirection(DcMotor.Direction.FORWARD);
        arm2.setDirection(DcMotor.Direction.FORWARD);


        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        runtime.reset();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            // Setup a variable for each drive wheel to save power level for telemetry
            double leftPower;
            double rightPower;
            double armPower1;
            double armPower2;


            // Choose to drive using either Tank Mode, or POV Mode
            // Comment out the method that's not used.  The default below is POV.

            // POV Mode uses left stick to go forward, and right stick to turn.
            // - This uses basic math to combine motions and is easier to drive straight.


            double drive = gamepad1.left_stick_y;
            double turn = -gamepad1.left_stick_x;
            double turbo = gamepad1.right_trigger + 1;
            double armMove1 = -gamepad1.right_stick_y;
            double armMove2 = -gamepad1.right_stick_y;


            leftPower = Range.clip(drive + turn, -1.1 * turbo, 1.1 * turbo);
            rightPower = Range.clip(drive - turn, -1.0, 1.0);
            armPower1 = Range.clip(armMove1, -1.0, 1.0);
            armPower2 = Range.clip(armMove2, -1.0, 1.0);
            // Tank Mode uses one stick to control each wheel.
            // - This requires no math, but it is hard to drive forward slowly and keep straight.
            // leftPower  = -gamepad1.left_stick_y ;
            // rightPower = -gamepad1.right_stick_y ;

            // Send calculated power to wheels
            leftDrive.setPower(leftPower);
            rightDrive.setPower(rightPower);
            arm1.setPower(armPower1);
            arm2.setPower(armPower2);


            {
                if (elapsedTime.time() > 1) {
                    move(18);
                    Thread.sleep(50);
                    turnleft(90);
                    Thread.sleep(50);
                    move(130);
                    turnright(200);
                    move(50);
                    bucket11position += 0.5;
                    bucket12position += 0.5;
                    bucket2position += 0.5;
                    runtime.reset();
                }
            }

            // Show the elapsed game time and wheel power.
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("name:", "sahib");
            telemetry.update();
        }
    }
}
