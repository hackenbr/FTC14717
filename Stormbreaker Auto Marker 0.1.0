package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
@TeleOp(name="test 2 15258", group="Linear Opmode")
public class test2 extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor leftDrive = null;
    private DcMotor rightDrive = null;
    private DcMotor hook = null;
    private DcMotor arm = null;
    private Servo marker = null;

    private void turnright (double degrees){

        runtime.reset();

        double movetime= (degrees/210);
        while (opModeIsActive() && (runtime.time()<movetime)){
            leftDrive.setPower(1);
            rightDrive.setPower(-1);
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("left motor",leftDrive.toString());
            telemetry.addData("right motor", rightDrive.toString());
            telemetry.addData("other thing", runtime.time());
            telemetry.update();
        }
        leftDrive.setPower(0);
        rightDrive.setPower(0);
    }
    private void turnleft (double degrees){

        runtime.reset();

        double movetime= (degrees/210);
        while (opModeIsActive() && (runtime.time()<movetime)){
            leftDrive.setPower(-1);
            rightDrive.setPower(1);
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("left motor",leftDrive.toString());
            telemetry.addData("right motor", rightDrive.toString());
            telemetry.addData("other thing", runtime.time());
            telemetry.update();
        }
        leftDrive.setPower(0);
        rightDrive.setPower(0);
    }

    private void move (double distance){  //distance is in cm. this function also doesn't account for sliding after motors shut off.

        runtime.reset();

        double movetime= (distance/76.5);
        while (opModeIsActive() && (runtime.time()<movetime)){
            leftDrive.setPower(1);
            rightDrive.setPower(1);
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("left motor",leftDrive.toString());
            telemetry.addData("right motor", rightDrive.toString());
            telemetry.addData("other thing", runtime.time());
            telemetry.update();
        }
        leftDrive.setPower(0);
        rightDrive.setPower(0);
    }

    private void moveback (double distance){  //distance is in cm. this function also doesn't account for sliding after motors shut off.

        runtime.reset();

        double movetime= (distance/76.5);
        while (opModeIsActive() && (runtime.time()<movetime)){
            leftDrive.setPower(-1);
            rightDrive.setPower(-1);
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("left motor",leftDrive.toString());
            telemetry.addData("right motor", rightDrive.toString());
            telemetry.addData("other thing", runtime.time());
            telemetry.update();
        }
        leftDrive.setPower(0);
        rightDrive.setPower(0);
    }



    @Override
    public void runOpMode() throws InterruptedException {
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step (using the FTC Robot Controller app on the phone).
        leftDrive  = hardwareMap.get(DcMotor.class, "motor0");
        rightDrive = hardwareMap.get(DcMotor.class, "motor1");
        hook       = hardwareMap.get(DcMotor.class, "motor2");
        arm        = hardwareMap.get(DcMotor.class, "motor3");
        marker     = hardwareMap.get(Servo.class, "servo0");
        // Most robots need the motor on one side to be reversed to drive forward
        // Reverse the motor that runs backwards when connected directly to the battery
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        rightDrive.setDirection(DcMotor.Direction.FORWARD);
        hook.setDirection(DcMotor.Direction.FORWARD);
        arm.setDirection(DcMotor.Direction.FORWARD);


        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        runtime.reset();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            // Setup a variable for each drive wheel to save power level for telemetry
            double leftPower;
            double rightPower;
            double armPower;



            // Choose to drive using either Tank Mode, or POV Mode
            // Comment out the method that's not used.  The default below is POV.

            // POV Mode uses left stick to go forward, and right stick to turn.
            // - This uses basic math to combine motions and is easier to drive straight.



            double drive   = 0;
            double turn    = 0;
            double turbo   = gamepad1.right_trigger+1;
            double armMove = -gamepad1.right_stick_y;





            leftPower    = Range.clip(drive + turn, -1.1*turbo, 1.1*turbo) ;
            rightPower   = Range.clip(drive - turn, -1.0, 1.0) ;
            armPower     =Range.clip(armMove, -0.9, 0.8);
            // Tank Mode uses one stick to control each wheel.
            // - This requires no math, but it is hard to drive forward slowly and keep straight.
            // leftPower  = -gamepad1.left_stick_y ;
            // rightPower = -gamepad1.right_stick_y ;

            // Send calculated power to wheels
            leftDrive.setPower(leftPower);
            rightDrive.setPower(rightPower);
            arm.setPower(armPower);

            if (gamepad1.y) {
                hook.setPower(1);
            }

            else if (gamepad1.a) {
                hook.setPower(-1);
            }

            else {
                hook.setPower(0);
            }
            if (gamepad1.dpad_left) {
                move(18);
                Thread.sleep(50);
                turnleft(90);
                Thread.sleep(50);
                move(41);
                Thread.sleep(50);
                turnright(90);
                Thread.sleep(50);
                turnleft(90);
                Thread.sleep(50);
                move(26);
                Thread.sleep(50);
                turnright(110);
                Thread.sleep(50);
                move(160);
            }
            else if (gamepad1.dpad_right) {
                move(18);
                Thread.sleep(50);
                turnright(90);
                Thread.sleep(50);
                move(41);
                Thread.sleep(50);
                turnleft(90);
                Thread.sleep(50);
                turnright(90);
                Thread.sleep(50);
                move(26);
                Thread.sleep(50);
                turnleft(50);
                Thread.sleep(50);
                move(135);
            }
            else if (gamepad1.dpad_up) {
                move(39);
                Thread.sleep(50);
                moveback(20);
                Thread.sleep(50);
                turnleft(90);
                Thread.sleep(50);
                move(77);
                Thread.sleep(50);
                turnright(110);
                Thread.sleep(50);
                move(160):
            }
            // Show the elapsed game time and wheel power.
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
            telemetry.addData("name:", "sahib");
            telemetry.addData("Hook height:", hook.getCurrentPosition());
            telemetry.update();
        }
    }
}
