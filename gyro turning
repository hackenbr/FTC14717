// note the turning functions will always set the robot to a specific position relative to its staring position
// also note the functions don't reset the motor turning (even though I do) so if you just set a move for 1 cm at the end it will be fine
private void turnright(double degrees){
      boolean run=true;
      while (run=true){
          Orientation angles = gyro.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
          if (run=true && angles.firstAngle<degrees){
              leftDrive.setPower(1);
              rightDrive.setPower(0);
              telemetry.addData("wa", "mario");
          }
          else {
              run=false;
              leftDrive.setPower(0);
              rightDrive.setPower(0);
              telemetry.addData("wa", "reeeeeee");
              break;
          }telemetry.update();
      }
  }
private void turnleft(double degrees){
    boolean run=true;
    while (run=true){
        Orientation angles = gyro.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
        if (run=true && angles.firstAngle<degrees){
            leftDrive.setPower(0);
            rightDrive.setPower(1);
            telemetry.addData("wa", "luigi");
        }
        else {
            run=false;
            leftDrive.setPower(0);
            rightDrive.setPower(0);
            telemetry.addData("wa", "reeeeeee");
            break;
        }telemetry.update();
    }
}

//an example of the code being used

@Override public void runOpMode() throws InterruptedException {
        // Get a reference to a Modern Robotics GyroSensor object. We use several interfaces
        // on this object to illustrate which interfaces support which functionality.
        leftDrive  = hardwareMap.get(DcMotor.class, "motor0");
        rightDrive = hardwareMap.get(DcMotor.class, "motor1");
        rightDrive.setDirection(DcMotor.Direction.FORWARD);
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        navxMicro = hardwareMap.get(NavxMicroNavigationSensor.class, "navx");
        gyro = (IntegratingGyroscope)navxMicro;
        // If you're only interested int the IntegratingGyroscope interface, the following will suffice.
        // gyro = hardwareMap.get(IntegratingGyroscope.class, "navx");

        // The gyro automatically starts calibrating. This takes a few seconds.
        telemetry.log().add("Gyro Calibrating. Do Not Move!");

        // Wait until the gyro calibration is complete
        timer.reset();
        while (navxMicro.isCalibrating())  {
            telemetry.addData("calibrating", "%s", Math.round(timer.seconds())%2==0 ? "|.." : "..|");
            telemetry.update();
            Thread.sleep(50);
        }
        telemetry.log().clear(); telemetry.log().add("Gyro Calibrated. Press Start.");
        telemetry.clear(); telemetry.update();

        // Wait for the start button to be pressed
        waitForStart();
        telemetry.log().clear();

        while (opModeIsActive()) {

            // Read dimensionalized data from the gyro. This gyro can report angular velocities
            // about all three axes. Additionally, it internally integrates the Z axis to
            // be able to report an absolute angular Z orientation.
            AngularVelocity rates = gyro.getAngularVelocity(AngleUnit.DEGREES);
            Orientation angles = gyro.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            //move(20);
            turnleft(90 );
            move(50);
            turnright(160);
            move(10);
            turnleft(190);

            telemetry.addLine()
                    .addData("dx", formatRate(rates.xRotationRate))
                    .addData("dy", formatRate(rates.yRotationRate))
                    .addData("dz", "%s deg/s", formatRate(rates.zRotationRate));

            telemetry.addLine()
                    .addData("heading", formatAngle(angles.angleUnit, angles.firstAngle))
                    .addData("roll", formatAngle(angles.angleUnit, angles.secondAngle))
                    .addData("pitch", "%s deg", formatAngle(angles.angleUnit, angles.thirdAngle));
            telemetry.update();

            idle(); // Always call idle() at the bottom of your while(opModeIsActive()) loop
            break;
        }
    }
