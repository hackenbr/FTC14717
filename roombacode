package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

@TeleOp(name="roombasicode", group="Linear Opmode")
public class roombabasiccontrols extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor leftDrive = null;
    private DcMotor rightDrive = null;
    private DcMotor arm1 = null;
    private DcMotor arm2 = null;
    private Servo bucket11 = null;
    private Servo bucket12 = null;
    private Servo bucket2 = null;
    private double bucket11position = 0;
    private double bucket12position = 0;
    private double bucket2position = 0;


    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step (using the FTC Robot Controller app on the phone).
        leftDrive  = hardwareMap.get(DcMotor.class, "motor0");
        rightDrive = hardwareMap.get(DcMotor.class, "motor1");
        arm1       = hardwareMap.get(DcMotor.class, "motor2");
        arm2        = hardwareMap.get(DcMotor.class, "motor3");
        // Most robots need the motor on one side to be reversed to drive forward
        // Reverse the motor that runs backwards when connected directly to the battery
        leftDrive.setDirection(DcMotor.Direction.FORWARD);
        rightDrive.setDirection(DcMotor.Direction.REVERSE);
        arm1.setDirection(DcMotor.Direction.FORWARD);
        arm2.setDirection(DcMotor.Direction.FORWARD);


        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        runtime.reset();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            // Setup a variable for each drive wheel to save power level for telemetry
            double leftPower;
            double rightPower;
            double armPower1;
            double armPower2;



            // Choose to drive using either Tank Mode, or POV Mode
            // Comment out the method that's not used.  The default below is POV.

            // POV Mode uses left stick to go forward, and right stick to turn.
            // - This uses basic math to combine motions and is easier to drive straight.
            double drive = gamepad1.left_stick_y;
            double turn  =  -gamepad1.left_stick_x;
            double turbo = gamepad1.right_trigger+1;
            double armMove1 = -gamepad1.right_stick_y;
            double armMove2 = -gamepad1.right_stick_y;


            leftPower    = Range.clip(drive + turn, -1.1*turbo, 1.1*turbo) ;
            rightPower   = Range.clip(drive - turn, -1.0, 1.0) ;
            armPower1     =Range.clip(armMove1, -1.0, 1.0);
            armPower2     =Range.clip(armMove2, -1.0, 1.0);
            // Tank Mode uses one stick to control each wheel.
            // - This requires no math, but it is hard to drive forward slowly and keep straight.
            // leftPower  = -gamepad1.left_stick_y ;
            // rightPower = -gamepad1.right_stick_y ;

            // Send calculated power to wheels
            leftDrive.setPower(leftPower);
            rightDrive.setPower(rightPower);
            arm1.setPower(armPower1);
            arm2.setPower(armPower2);

            if (gamepad1.y) {
                bucket11position += 0.005;
                bucket12position += 0.005;
            }

            else if (gamepad1.a) {
                bucket11position -= 0.005;
                bucket12position -= 0.005;
            }

            else {
                bucket11position = 0;
                bucket12position = 0;
            }

            if (gamepad1.left_bumper) {
                bucket2position+=0.005;
            }
            else if (gamepad1.right_bumper) {
                bucket2position -= 0.005;
            }
            else {
                bucket2position=0;
            }
            bucket11.setPosition(bucket11position);
            bucket12.setPosition(bucket12position);
            bucket2.setPosition(bucket2position);
            // Show the elapsed game time and wheel power.
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
            telemetry.addData("name:", "sahib");
            telemetry.update();
        }
    }
}
